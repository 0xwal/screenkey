#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2010 Pablo Seminario <pabluk@gmail.com>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function, unicode_literals

from Screenkey import APP_NAME, APP_DESC, VERSION
import Screenkey.screenkey as sc

import os
import logging
from argparse import ArgumentParser


def detach():
    if os.fork() != 0:
        os._exit(0)
    os.setsid()
    if os.fork() != 0:
        os._exit(0)
    for i in range(3):
        os.close(i)


def main():
    ap = ArgumentParser(description=APP_DESC, version=VERSION)
    ap.add_argument("--no-detach", action="store_true",
                    dest="nodetach", default=False,
                    help=_("do not detach from the parent"))
    ap.add_argument("-d", "--debug", action="store_true",
                    dest="debug", default=False, help=_("enable debugging (implies --no-detach)"))
    ap.add_argument("-t", "--timeout", action="store_true",
                    dest="timeout", help=_("timeout in seconds"))
    ap.add_argument("-m", "--mods-only", action="store_true",
                    dest="mods_only", help=_("Show only keys with modifiers pressed"))
    args = ap.parse_args()

    # Initialize logger
    if args.debug:
        args.nodetach = True
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(APP_NAME)

    if args.nodetach == False:
        detach()

    sc.Screenkey(logger=logger, timeout=args.timeout, mods_only=args.mods_only)
    try:
        sc.gtk.main()
    except KeyboardInterrupt:
        os._exit(0)
    except:
        logger.exception("uncaught exception")
        os.abort()


if __name__ == "__main__":
    main()
