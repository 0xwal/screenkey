#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2010 Pablo Seminario <pabluk@gmail.com>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function, unicode_literals

from Screenkey import APP_NAME, APP_DESC, VERSION
import Screenkey.screenkey as sc

import os
import logging
from argparse import ArgumentParser


def detach():
    if os.fork() != 0:
        os._exit(0)
    os.setsid()
    if os.fork() != 0:
        os._exit(0)
    os.close(0)


def main():
    ap = ArgumentParser(description=APP_DESC, version=VERSION)
    ap.add_argument("--no-detach", action="store_true", default=False,
                    help=_("do not detach from the parent"))
    ap.add_argument("-d", "--debug", action="store_true",
                    default=False, help=_("enable debugging (implies --no-detach)"))
    ap.add_argument("-t", "--timeout", type=float, help=_("timeout in seconds"))
    ap.add_argument("-p", "--position", choices=sc.POSITIONS,
                    help=_("set vertical position"))
    ap.add_argument("-s", "--font-size", choices=sc.FONT_SIZES,
                    help=_("set font size"))
    ap.add_argument("--key-mode", choices=sc.KEY_MODES,
                    help=_("set key processing mode"))
    ap.add_argument("--bak-mode", choices=sc.BAK_MODES,
                    help=_("backspace processing mode"))
    ap.add_argument("-m", "--mods-only", action="store_true",
                    help=_("show only keys with modifiers pressed"))
    ap.add_argument("--show-settings", action="store_true",
                    help=_("show settings dialog on start"))
    ap.add_argument("--scr", type=int,
                    help=_("show on the specified screen"))
    args = ap.parse_args()

    # Set options
    options = sc.Options()
    if args.timeout is not None:
        options.timeout = args.timeout
    if args.position is not None:
        options.position = args.position
    if args.font_size is not None:
        options.font_size = args.font_size
    if args.key_mode is not None:
        options.key_mode = args.key_mode
    if args.bak_mode is not None:
        options.bak_mode = args.bak_mode
    if args.mods_only is not None:
        options.mods_only = args.mods_only
    if args.scr is not None:
        options.screen = args.scr

    # Initialize logger
    if args.debug:
        args.no_detach = True
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(APP_NAME)

    if args.no_detach == False:
        detach()

    sc.Screenkey(logger=logger, options=options, show_settings=args.show_settings)
    try:
        sc.gtk.main()
    except KeyboardInterrupt:
        os._exit(0)
    except:
        logger.exception("uncaught exception")
        os.abort()


if __name__ == "__main__":
    main()
